import { cp, mkdir, mkdtemp, readFile, rm, writeFile } from "node:fs/promises";
import { tmpdir } from "node:os";
import { dirname, join } from "node:path";
import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
import { compileMigrations } from "../cli/migrate";

async function withFileSystem(
  files: Record<string, string>,
  fn: (rootPath: string) => Promise<void>
) {
  const rootPath = await mkdtemp(join(tmpdir(), "superflare-test"));

  // Copy fake Superflare node_module to the root path
  await cp(
    join(__dirname, "..", "dist"),
    join(rootPath, "node_modules", "superflare"),
    {
      recursive: true,
    }
  );

  // Create a package.json file in the root path
  await writeFile(
    join(rootPath, "package.json"),
    JSON.stringify({
      name: "superflare-test",
      dependencies: {
        superflare: "file:node_modules/superflare",
      },
    })
  );

  const promises = Object.entries(files).map(async ([path, content]) => {
    const fullPath = join(rootPath, ...path.split("/"));
    await mkdir(dirname(fullPath), { recursive: true });
    await writeFile(fullPath, content);
  });

  const cleanup = () => rm(rootPath, { recursive: true, force: true });

  await Promise.all(promises)
    .then(() => fn(rootPath))
    .catch((e) => {
      throw e;
    })
    .finally(cleanup);
}

describe("compileMigrations", () => {
  const date = new Date();

  beforeEach(() => {
    vi.useFakeTimers();
    vi.setSystemTime(date);
  });

  afterEach(() => {
    vi.useRealTimers();
  });

  it("compiles a migration to SQL", async () => {
    await withFileSystem(
      {
        "app/migrations/0000_create_users_table.ts": `import { Schema } from 'superflare';
      export default function () {
        return Schema.create("users", (builder) => {
          builder.increments("id");
          builder.string("email");
        });
      }`,
      },
      async (rootPath) => {
        await compileMigrations(
          join(rootPath, "app", "migrations"),
          join(rootPath, "migrations")
        );

        const sql = await readFile(
          join(rootPath, "migrations", "0000_create_users_table.sql"),
          "utf-8"
        );
        const timestamp = new Date().toISOString();
        expect(sql).toEqual(
          `-- Migration number: 0000 	 ${timestamp}
-- Autogenerated by Superflare. Do not edit this file directly.
CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  email TEXT NOT NULL
);`
        );
      }
    );
  });

  it("compiles a migration with multiple Schema returns to SQL", async () => {
    await withFileSystem(
      {
        "app/migrations/0000_create_tables.ts": `import { Schema } from 'superflare';
      export default function () {
        return [
          Schema.create("users", (builder) => {
            builder.increments("id");
            builder.string("email");
          }),
          Schema.create("posts", (builder) => {
            builder.increments("id");
            builder.string("title");
          }),
        ];
      }`,
      },
      async (rootPath) => {
        await compileMigrations(
          join(rootPath, "app", "migrations"),
          join(rootPath, "migrations")
        );

        const sql = await readFile(
          join(rootPath, "migrations", "0000_create_tables.sql"),
          "utf-8"
        );
        const timestamp = new Date().toISOString();
        expect(sql).toEqual(
          `-- Migration number: 0000 	 ${timestamp}
-- Autogenerated by Superflare. Do not edit this file directly.
CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  email TEXT NOT NULL
);

CREATE TABLE posts (
  id INTEGER PRIMARY KEY,
  title TEXT NOT NULL
);`
        );
      }
    );
  });
});
